# type: ignore
"""
Entities generated by sqlacodegen.
"""

from sqlalchemy import (
    CHAR,
    CheckConstraint,
    Column,
    DateTime,
    Enum,
    ForeignKeyConstraint,
    Identity,
    Index,
    Integer,
    LargeBinary,
    PrimaryKeyConstraint,
    TIMESTAMP,
    Table,
    Text,
    VARCHAR,
    text,
)
from sqlalchemy.dialects.oracle import NUMBER
from sqlalchemy.orm import declarative_base, relationship

Base = declarative_base()
metadata = Base.metadata


t_audit_log = Table(
    "audit_log",
    metadata,
    Column(
        "id",
        NUMBER(asdecimal=False),
        Identity(
            always=True,
            on_null=False,
            start=1,
            increment=1,
            minvalue=1,
            maxvalue=9999999999999999999999999999,
            cycle=False,
            cache=20,
            order=False,
        ),
        nullable=False,
    ),
    Column("created_at", DateTime, nullable=False, server_default=text("SYSDATE ")),
    Column("application", VARCHAR(200), nullable=False),
    Column("principal", VARCHAR(200), nullable=False),
    Column("description", VARCHAR(200), nullable=False),
    Column("data", Text),
)




class EntranceFeesrecords(Base):
    __tablename__ = "entrance_feesrecords"
    __table_args__ = (
        PrimaryKeyConstraint("member_id", name="entrance_feesrecords_pk"),
        Index("entrance_fee_uq", "member_id", "year_f", unique=True),
    )

    member_id = Column(NUMBER(asdecimal=False), primary_key=True)
    year_f = Column(NUMBER(asdecimal=False))


class Fees(Base):
    __tablename__ = "fees"
    __table_args__ = (
        CheckConstraint("cat_id in ('AS','AJ','FM','H','C','T')", name="check_cat"),
        PrimaryKeyConstraint("cat_id", name="cat_pk"),
    )

    cat_id = Column(VARCHAR(2), primary_key=True)
    description = Column(VARCHAR(25), nullable=False)
    entrance_fee = Column(NUMBER(asdecimal=False), nullable=False)
    annual_fee = Column(NUMBER(asdecimal=False), nullable=False)
    lastchange = Column(VARCHAR(15))


t_feescourses_lastentry2005_obs = Table(
    "feescourses_lastentry2005_obs",
    metadata,
    Column("member_id", NUMBER(asdecimal=False), nullable=False),
    Column("year_c", NUMBER(4, 0, False), nullable=False),
    Column("course", VARCHAR(2), nullable=False),
    Column("paid_date", DateTime),
    Column("paid_mode", VARCHAR(4)),
    Column("feecourse", NUMBER(3, 0, False), nullable=False),
)


t_feesrecords = Table(
    "feesrecords",
    metadata,
    Column("member_id", NUMBER(asdecimal=False), nullable=False),
    Column("year_f", NUMBER(4, 0, False), nullable=False),
    Column("paid_date", DateTime),
    Column("paid_mode", VARCHAR(4)),
    Column("fee", NUMBER(3, 0, False), nullable=False),
    Column("entered_date", DateTime, server_default=text("sysdate")),
    Column("paymentid", NUMBER(asdecimal=False)),
)


class HelperTaskCategories(Base):
    __tablename__ = "helper_task_categories"
    __table_args__ = (PrimaryKeyConstraint("id", name="helper_task_categories_pk"),)

    id = Column(
        NUMBER(asdecimal=False),
        Identity(
            on_null=False,
            start=10,
            increment=1,
            minvalue=1,
            maxvalue=9999999999999999999999999999,
            cycle=False,
            cache=20,
            order=False,
        ),
        primary_key=True,
    )
    title = Column(VARCHAR(50), nullable=False)
    short_description = Column(VARCHAR(200), nullable=False)
    long_description = Column(Text)

    helper_tasks = relationship("HelperTasks", back_populates="category")


t_holidays = Table(
    "holidays",
    metadata,
    Column("day", DateTime, nullable=False),
    Column("label", VARCHAR(20), nullable=False),
    Column("id", NUMBER(asdecimal=False)),
)


class ImportantDates(Base):
    __tablename__ = "important_dates"
    __table_args__ = (
        PrimaryKeyConstraint("id", name="sys_c0011590"),
        Index("important_dates_uq", "what", unique=True),
    )

    id = Column(NUMBER(asdecimal=False), primary_key=True)
    what = Column(VARCHAR(50), nullable=False)
    datetime = Column(DateTime)


class ImportantValues(Base):
    __tablename__ = "important_values"
    __table_args__ = (PrimaryKeyConstraint("id", name="sys_c0011423"),)

    id = Column(NUMBER(10, 0, False), primary_key=True)
    what = Column(VARCHAR(50), nullable=False)
    val = Column(VARCHAR(50), nullable=False)
    last_modified = Column(DateTime, nullable=False)


class Infolicences(Base):
    __tablename__ = "infolicences"
    __table_args__ = (PrimaryKeyConstraint("infoid", name="licinfo_pk"),)

    infoid = Column(NUMBER(asdecimal=False), primary_key=True)
    description = Column(VARCHAR(50), nullable=False)
    ncourse = Column(VARCHAR(2))
    nlicence = Column(VARCHAR(2))
    nkey = Column(VARCHAR(2))
    coursefee = Column(NUMBER(4, 0, False))
    course_name = Column(VARCHAR(30))
    course_active = Column(CHAR(1))
    course_level = Column(NUMBER(1, 0, False))

    helper_tasks = relationship(
        "HelperTasks", back_populates="captain_required_licence_info"
    )


class InterestLevels(Base):
    __tablename__ = "interest_levels"
    __table_args__ = (PrimaryKeyConstraint("interest_level", name="sys_c0011617"),)

    interest_level = Column(NUMBER(1, 0, False), primary_key=True)
    description = Column(VARCHAR(100))


class Members(Base):
    __tablename__ = "members"
    __table_args__ = (PrimaryKeyConstraint("id", name="members_pk"),)

    id = Column(NUMBER(asdecimal=False), primary_key=True)
    name = Column(VARCHAR(25), nullable=False)
    firstname = Column(VARCHAR(25), nullable=False)
    membership = Column(VARCHAR(2), nullable=False)
    home_addr = Column(VARCHAR(50), nullable=False)
    member_entrance = Column(VARCHAR(4), nullable=False)
    birthday = Column(DateTime)
    nationality = Column(VARCHAR(3))
    temp_memb = Column(NUMBER(1, 0, False))
    lang1 = Column(VARCHAR(3))
    lang2 = Column(VARCHAR(3))
    category = Column(VARCHAR(1))
    work_address1 = Column(VARCHAR(50))
    work_address2 = Column(VARCHAR(50))
    work_towncode = Column(VARCHAR(7))
    work_town = Column(VARCHAR(25))
    work_state = Column(VARCHAR(5))
    work_phone = Column(VARCHAR(25))
    e_mail = Column(VARCHAR(50))
    home_towncode = Column(VARCHAR(7))
    home_town = Column(VARCHAR(25))
    home_state = Column(VARCHAR(5))
    home_phone = Column(VARCHAR(25))
    mail_preference = Column(VARCHAR(1))
    favourite_mailing_post = Column(VARCHAR(1))
    cell_phone = Column(VARCHAR(25))
    gender = Column(VARCHAR(2))
    valid_until_date = Column(DateTime)
    last_updated_date = Column(DateTime)
    valid_from_date = Column(DateTime)
    interest_in_fibreglass = Column(NUMBER(1, 0, False))
    interest_in_woodwork = Column(NUMBER(1, 0, False))
    interest_in_ropework = Column(NUMBER(1, 0, False))
    interest_in_paintwork = Column(NUMBER(1, 0, False))
    interest_in_motors = Column(NUMBER(1, 0, False))
    interest_in_organising_social = Column(NUMBER(1, 0, False))
    interest_in_organising_regattas = Column(NUMBER(1, 0, False))
    interest_in_teaching_dinghies = Column(NUMBER(1, 0, False))
    interest_in_teaching_cats = Column(NUMBER(1, 0, False))
    interest_in_teaching_keelboats = Column(NUMBER(1, 0, False))
    interest_in_teaching_motorboats = Column(NUMBER(1, 0, False))
    interest_in_surveillance = Column(NUMBER(1, 0, False))
    interest_in_towing_on_land = Column(NUMBER(1, 0, False))
    special_talents = Column(VARCHAR(1000))

    boats = relationship("Boats", back_populates="members")
    classes_obsolete2001 = relationship(
        "ClassesObsolete2001",
        foreign_keys="[ClassesObsolete2001.helper_id]",
        back_populates="helper",
    )
    classes_obsolete2001_ = relationship(
        "ClassesObsolete2001",
        foreign_keys="[ClassesObsolete2001.teacher_id]",
        back_populates="teacher",
    )
    committee = relationship("Committee", back_populates="member")
    courses_obs = relationship("CoursesObs", back_populates="member")
    helper_tasks = relationship(
        "HelperTasks", foreign_keys="[HelperTasks.captain_id]", back_populates="captain"
    )
    helper_tasks_ = relationship(
        "HelperTasks", foreign_keys="[HelperTasks.contact_id]", back_populates="contact"
    )
    helper_tasks1 = relationship(
        "HelperTasks",
        foreign_keys="[HelperTasks.marked_as_done_by_id]",
        back_populates="marked_as_done_by",
    )
    helper_tasks2 = relationship(
        "HelperTasks",
        foreign_keys="[HelperTasks.validated_by_id]",
        back_populates="validated_by",
    )
    keys = relationship("Keys", back_populates="member")
    licences = relationship("Licences", back_populates="member")
    helper_task_helpers = relationship("HelperTaskHelpers", back_populates="member")
    regatta_participation = relationship(
        "RegattaParticipation", back_populates="member"
    )
    ycclog = relationship("Ycclog", back_populates="owner")


class Boats(Base):
    __tablename__ = "boats"
    __table_args__ = (
        ForeignKeyConstraint(["maintainer_id2"], ["members.id"], name="sys_c0011679"),
        PrimaryKeyConstraint("boat_id", name="sys_c0011569"),
        Index("sys_c0011570", "name", unique=True),
        Index("sys_c0011571", "ycc_num", unique=True),
        Index("sys_c0011572", "table_pos", unique=True),
    )

    boat_id = Column(NUMBER(3, 0, False), primary_key=True)
    name = Column(VARCHAR(20), nullable=False)
    type = Column(VARCHAR(20), nullable=False)
    license = Column(VARCHAR(5), nullable=False)
    class_ = Column("class", VARCHAR(5), nullable=False)
    table_pos = Column(NUMBER(5, 0, False), nullable=False)
    ycc_num = Column(NUMBER(3, 0, False))
    maintainer_id = Column(NUMBER(asdecimal=False))
    ext_reg_cat = Column(VARCHAR(2))
    maintainer_id2 = Column(NUMBER(asdecimal=False))
    registration_pdf = Column(LargeBinary)

    members = relationship("Members", back_populates="boats")
    keyslog = relationship("Keyslog", back_populates="boat")
    regatta_participation = relationship(
        "RegattaParticipation",
        foreign_keys="[RegattaParticipation.assigned_boat_id]",
        back_populates="assigned_boat",
    )
    regatta_participation_ = relationship(
        "RegattaParticipation",
        foreign_keys="[RegattaParticipation.boat_id]",
        back_populates="boat",
    )
    reservations = relationship("Reservations", back_populates="boat")
    ycclog = relationship("Ycclog", back_populates="boat")


class ClassesObsolete2001(Base):
    __tablename__ = "classes_obsolete2001"
    __table_args__ = (
        ForeignKeyConstraint(["helper_id"], ["members.id"], name="helper_fk"),
        ForeignKeyConstraint(["teacher_id"], ["members.id"], name="teacher_fk"),
        PrimaryKeyConstraint(
            "class_id", "teacher_id", "course_year", name="classes_pk"
        ),
    )

    class_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    course_id = Column(NUMBER(2, 0, False), nullable=False)
    teacher_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    course_year = Column(NUMBER(4, 0, False), primary_key=True, nullable=False)
    helper_id = Column(NUMBER(asdecimal=False))
    day_class = Column(VARCHAR(3))
    lang = Column(VARCHAR(2))
    notes = Column(VARCHAR(50))

    helper = relationship(
        "Members", foreign_keys=[helper_id], back_populates="classes_obsolete2001"
    )
    teacher = relationship(
        "Members", foreign_keys=[teacher_id], back_populates="classes_obsolete2001_"
    )


class Committee(Base):
    __tablename__ = "committee"
    __table_args__ = (
        ForeignKeyConstraint(["member_id"], ["members.id"], name="committee_member_fk"),
        PrimaryKeyConstraint("member_id", "cyear", name="committee_pk"),
        Index("sys_c0011625", "commid", unique=True),
    )

    member_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    cyear = Column(NUMBER(4, 0, False), primary_key=True, nullable=False)
    commid = Column(NUMBER(10, 0, False), nullable=False)
    lcomments = Column(VARCHAR(100))
    photo = Column(VARCHAR(50))
    position = Column(NUMBER(asdecimal=False))
    roles = Column(VARCHAR(500))

    member = relationship("Members", back_populates="committee")




class HelperTasks(Base):
    __tablename__ = "helper_tasks"
    __table_args__ = (
        CheckConstraint(
            " (                0 <= helper_min_count )\n            AND ( helper_min_count <= helper_max_count ) ",
            name="helper_tasks_check_helper_min_max_count",
        ),
        CheckConstraint(
            " (                0 <= helper_min_count )\n            AND ( helper_min_count <= helper_max_count ) ",
            name="helper_tasks_check_helper_min_max_count",
        ),
        CheckConstraint(
            " ( captain_id IS     NULL AND captain_signed_up_at IS     NULL )\n             OR ( captain_id IS NOT NULL AND captain_signed_up_at IS NOT NULL ) ",
            name="helper_tasks_check_captain_fields",
        ),
        CheckConstraint(
            " ( captain_id IS     NULL AND captain_signed_up_at IS     NULL )\n             OR ( captain_id IS NOT NULL AND captain_signed_up_at IS NOT NULL ) ",
            name="helper_tasks_check_captain_fields",
        ),
        CheckConstraint(
            " ( starts_at IS NOT NULL AND ends_at IS NOT NULL AND deadline IS     NULL and starts_at < ends_at )\n             OR ( starts_at IS     NULL AND ends_at IS     NULL AND deadline IS NOT NULL                         ) ",
            name="helper_tasks_check_timing",
        ),
        CheckConstraint(
            " ( starts_at IS NOT NULL AND ends_at IS NOT NULL AND deadline IS     NULL and starts_at < ends_at )\n             OR ( starts_at IS     NULL AND ends_at IS     NULL AND deadline IS NOT NULL                         ) ",
            name="helper_tasks_check_timing",
        ),
        CheckConstraint(
            " ( starts_at IS NOT NULL AND ends_at IS NOT NULL AND deadline IS     NULL and starts_at < ends_at )\n             OR ( starts_at IS     NULL AND ends_at IS     NULL AND deadline IS NOT NULL                         ) ",
            name="helper_tasks_check_timing",
        ),
        CheckConstraint(
            " (marked_as_done_at IS     NULL AND marked_as_done_by_id IS     NULL)\n             OR (marked_as_done_at IS NOT NULL AND marked_as_done_by_id IS NOT NULL) ",
            name="helper_tasks_check_marked_as_done_fields",
        ),
        CheckConstraint(
            " (marked_as_done_at IS     NULL AND marked_as_done_by_id IS     NULL)\n             OR (marked_as_done_at IS NOT NULL AND marked_as_done_by_id IS NOT NULL) ",
            name="helper_tasks_check_marked_as_done_fields",
        ),
        CheckConstraint(
            " (validated_at IS     NULL AND validated_by_id IS     NULL)\n             OR (validated_at IS NOT NULL AND validated_by_id IS NOT NULL) ",
            name="helper_tasks_check_validated_fields",
        ),
        CheckConstraint(
            " (validated_at IS     NULL AND validated_by_id IS     NULL)\n             OR (validated_at IS NOT NULL AND validated_by_id IS NOT NULL) ",
            name="helper_tasks_check_validated_fields",
        ),
        ForeignKeyConstraint(
            ["captain_id"], ["members.id"], name="helper_tasks_captain_fk"
        ),
        ForeignKeyConstraint(
            ["captain_required_licence_info_id"],
            ["infolicences.infoid"],
            name="helper_tasks_captain_required_licence_info_fk",
        ),
        ForeignKeyConstraint(
            ["category_id"],
            ["helper_task_categories.id"],
            name="helper_tasks_category_fk",
        ),
        ForeignKeyConstraint(
            ["contact_id"], ["members.id"], name="helper_tasks_contact_fk"
        ),
        ForeignKeyConstraint(
            ["marked_as_done_by_id"],
            ["members.id"],
            name="helper_tasks_marked_as_done_by_fk",
        ),
        ForeignKeyConstraint(
            ["validated_by_id"], ["members.id"], name="helper_tasks_validated_by_fk"
        ),
        PrimaryKeyConstraint("id", name="helper_tasks_pk"),
    )

    id = Column(
        NUMBER(asdecimal=False),
        Identity(
            on_null=False,
            start=3000,
            increment=1,
            minvalue=1,
            maxvalue=9999999999999999999999999999,
            cycle=False,
            cache=20,
            order=False,
        ),
        primary_key=True,
    )
    category_id = Column(NUMBER(asdecimal=False), nullable=False)
    title = Column(VARCHAR(50), nullable=False)
    short_description = Column(VARCHAR(200), nullable=False)
    contact_id = Column(NUMBER(asdecimal=False), nullable=False)
    urgent = Column(NUMBER(1, 0, False), nullable=False)
    helper_min_count = Column(NUMBER(asdecimal=False), nullable=False)
    helper_max_count = Column(NUMBER(asdecimal=False), nullable=False)
    published = Column(NUMBER(1, 0, False), nullable=False)
    long_description = Column(Text)
    starts_at = Column(DateTime)
    ends_at = Column(DateTime)
    deadline = Column(DateTime)
    captain_required_licence_info_id = Column(NUMBER(asdecimal=False))
    captain_id = Column(NUMBER(asdecimal=False))
    captain_signed_up_at = Column(DateTime)
    marked_as_done_at = Column(DateTime)
    marked_as_done_by_id = Column(NUMBER(asdecimal=False))
    marked_as_done_comment = Column(Text)
    validated_at = Column(DateTime)
    validated_by_id = Column(NUMBER(asdecimal=False))
    validation_comment = Column(Text)

    captain = relationship(
        "Members", foreign_keys=[captain_id], back_populates="helper_tasks"
    )
    captain_required_licence_info = relationship(
        "Infolicences", back_populates="helper_tasks"
    )
    category = relationship("HelperTaskCategories", back_populates="helper_tasks")
    contact = relationship(
        "Members", foreign_keys=[contact_id], back_populates="helper_tasks_"
    )
    marked_as_done_by = relationship(
        "Members", foreign_keys=[marked_as_done_by_id], back_populates="helper_tasks1"
    )
    validated_by = relationship(
        "Members", foreign_keys=[validated_by_id], back_populates="helper_tasks2"
    )
    helper_task_helpers = relationship("HelperTaskHelpers", back_populates="task")


class HelpersAppPermissions(Members):
    __tablename__ = "helpers_app_permissions"
    __table_args__ = (
        ForeignKeyConstraint(
            ["member_id"], ["members.id"], name="helpers_app_permissions_member_fk"
        ),
        PrimaryKeyConstraint("member_id", name="helpers_app_permissions_pk"),
    )

    member_id = Column(NUMBER(asdecimal=False), primary_key=True)
    permission = Column(Enum("ADMIN", "EDITOR"), nullable=False)


class Licences(Base):
    __tablename__ = "licences"
    __table_args__ = (
        ForeignKeyConstraint(["member_id"], ["members.id"], name="sys_c0011687"),
        PrimaryKeyConstraint("licence_id", "member_id", name="licence_pk"),
    )

    member_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    licence_id = Column(NUMBER(2, 0, False), primary_key=True, nullable=False)
    lyear = Column(NUMBER(4, 0, False), nullable=False)
    lcomments = Column(VARCHAR(100))
    test_id = Column(NUMBER(asdecimal=False))
    status = Column(NUMBER(4, 0, False))

    member = relationship("Members", back_populates="licences")


t_regatta_profiles = Table(
    "regatta_profiles",
    metadata,
    Column("id", NUMBER(asdecimal=False)),
    Column("member_id", NUMBER(asdecimal=False), nullable=False),
    Column("profile_year", NUMBER(4, 0, False), nullable=False),
    Column("licence", VARCHAR(10)),
    Column("club", VARCHAR(25)),
    Column("experience", VARCHAR(1000), nullable=False),
    ForeignKeyConstraint(["member_id"], ["members.id"], name="sys_c0011694"),
    Index("ref_prof_mem_id", "member_id"),
)


class WebLogon(Members):
    __tablename__ = "web_logon"
    __table_args__ = (
        ForeignKeyConstraint(["member_id"], ["members.id"], name="sys_c0011697"),
        PrimaryKeyConstraint("member_id", name="sys_c0011646"),
        Index("sys_c0011647", "logon_id", unique=True),
    )

    member_id = Column(NUMBER(asdecimal=False), primary_key=True)
    logon_id = Column(VARCHAR(25), nullable=False)
    session_id = Column(NUMBER(asdecimal=False))
    session_date = Column(DateTime)
    logon_pass2 = Column(VARCHAR(128))
    pass_reset_key = Column(VARCHAR(128))
    pass_reset_exp = Column(DateTime)
    last_changed = Column(DateTime)
    rf_uid = Column(VARCHAR(10))


class HelperTaskHelpers(Base):
    __tablename__ = "helper_task_helpers"
    __table_args__ = (
        ForeignKeyConstraint(
            ["member_id"], ["members.id"], name="helper_task_helpers_member_fk"
        ),
        ForeignKeyConstraint(
            ["task_id"], ["helper_tasks.id"], name="helper_task_helpers_task_fk"
        ),
        PrimaryKeyConstraint("task_id", "member_id", name="helper_task_helpers_pk"),
    )

    task_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    member_id = Column(NUMBER(asdecimal=False), primary_key=True, nullable=False)
    signed_up_at = Column(DateTime, nullable=False)

    member = relationship("Members", back_populates="helper_task_helpers")
    task = relationship("HelperTasks", back_populates="helper_task_helpers")


class Reservations(Base):
    __tablename__ = "reservations"
    __table_args__ = (
        ForeignKeyConstraint(["boat_id"], ["boats.boat_id"], name="sys_c0011695"),
        PrimaryKeyConstraint("res_id", name="sys_c0011634"),
    )

    res_id = Column(NUMBER(asdecimal=False), primary_key=True)
    boat_id = Column(NUMBER(3, 0, False), nullable=False)
    owner_id = Column(NUMBER(asdecimal=False), nullable=False)
    label = Column(VARCHAR(25), nullable=False)
    day = Column(DateTime, nullable=False)
    period = Column(NUMBER(1, 0, False), nullable=False)
    modified = Column(DateTime, nullable=False)
    locked = Column(NUMBER(1, 0, False))
    deleted = Column(DateTime)

    boat = relationship("Boats", back_populates="reservations")


t_status = Table(
    "status",
    metadata,
    Column("stat_id", NUMBER(asdecimal=False), nullable=False),
    Column("boat_id", NUMBER(3, 0, False), nullable=False),
    Column("owner_id", NUMBER(asdecimal=False), nullable=False),
    Column("label", VARCHAR(20), nullable=False),
    Column("s_begin", DateTime, nullable=False),
    Column("s_end", DateTime),
    Column("status", NUMBER(1, 0, False), nullable=False),
    Column("modified", DateTime, nullable=False),
    ForeignKeyConstraint(["boat_id"], ["boats.boat_id"], name="sys_c0011696"),
)

